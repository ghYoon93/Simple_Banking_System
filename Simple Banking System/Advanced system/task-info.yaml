type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: test/banking/domain/AccountTests.java
  visible: true
  learner_created: false
- name: src/banking/view/MainView.java
  visible: true
  text: |
    package banking.view;

    import banking.domain.Command;
    import banking.dto.LoginRequestDto;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class MainView  {

        public static final String CREATE_AN_ACCOUNT = "1. Create an account";
        public static final String LOG_INTO_ACCOUNT = "2. Log into account";
        public static final String EXIT = "0. Exit";
        public static final String PROMPT = ">";
        public static final String ENTER_YOUR_CARD_NUMBER = "Enter your card Number:";
        public static final String ENTER_YOUR_PIN = "Enter your PIN";
        public static Map<String, Command> commands;

        static {
            commands = new HashMap<>();
            commands.put("1", Command.CREATE);
            commands.put("2", Command.LOGIN);
            commands.put("0", Command.EXIT);
        }


        public static Command showMenu(Scanner scanner) {
            System.out.println(CREATE_AN_ACCOUNT);
            System.out.println(LOG_INTO_ACCOUNT);
            System.out.println(EXIT);
            System.out.print(PROMPT);
            String choice = scanner.nextLine();
            Command command = commands.getOrDefault(choice, Command.INVALID);
            return command;
        }

        public static LoginRequestDto login(Scanner scanner) {
            System.out.println();
            System.out.println(ENTER_YOUR_CARD_NUMBER);
            System.out.print(PROMPT);
            String cardNumber = scanner.nextLine();
            System.out.println(ENTER_YOUR_PIN);
            System.out.print(PROMPT);
            String pin = scanner.nextLine();
            System.out.println();
            return new LoginRequestDto(cardNumber, pin);
        }


    }
  learner_created: true
- name: src/banking/config/DataSourceFactory.java
  visible: true
  text: |
    package banking.config;

    import org.sqlite.SQLiteDataSource;

    import javax.sql.DataSource;
    import java.sql.Connection;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class DataSourceFactory {

        public static DataSource createDatabase(String url) {
            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl("jdbc:sqlite:" + url);
            createTable(dataSource);
            return dataSource;
        }

        private static void createTable(DataSource dataSource) {
            try (Connection conn = dataSource.getConnection()) {
                try(Statement statement = conn.createStatement()) {
                    statement.executeUpdate("CREATE TABLE IF NOT EXISTS card(" +
                            "id INTEGER NOT NULL,"+
                            "number TEXT NOT NULL,"+
                            "pin VARCHAR(4) NOT NULL,"+
                            "balance INTEGER DEFAULT 0)");
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }


        }
    }
  learner_created: true
- name: src/banking/dto/Request.java
  visible: true
  text: |
    package banking.dto;

    public class Request {
    }
  learner_created: true
- name: src/banking/utils/AccountGenerator.java
  visible: true
  text: |-
    package banking.utils;

    import banking.domain.Account;

    import java.util.Random;

    public class AccountGenerator {
        private static final String BIN = "400000";

        public static Account create(Long id) {
            String cardNumber = BIN + String.format("%09d", id);
            String created = generateCardNumber(cardNumber);
            String pin = generatePin();
            return new Account(id, created, pin);
        }

        private static String generatePin() {
            Random random = new Random();
            StringBuilder pin = new StringBuilder();
            while(pin.length() < 4) {
                pin.append(random.nextInt(10));
            }
            return pin.toString();
        }

        private static String generateCardNumber(String cardNumber) {
            int sum = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int number = charToInt(cardNumber.charAt(i));
                number = applyLuhn(i, number);
                sum += number;
            }

            int checkSum = 0;
            if (sum % 10 != 0) {
                checkSum = 10 - sum % 10;
            }

            cardNumber += String.valueOf(checkSum);
            return cardNumber;
        }

        private static int charToInt(char original) {
            return original - '0';
        }

        private static int applyLuhn(int position, int number) {
            if (isOdd(position)) {
                number = multiply(number);
            }
            number = substract(number);
            return number;
        }

        private static int substract(int number) {
            if (number > 9) {
                number -= 9;
            }
            return number;
        }

        private static int multiply(int number) {
            return number * 2;
        }

        private static boolean isOdd(int position) {
            return position % 2 == 0;
        }
    }
  learner_created: true
- name: src/banking/interfaces/BankingSystem.java
  visible: true
  text: |
    package banking.interfaces;

    import banking.application.AccountService;
    import banking.domain.AccountDao;
    import banking.domain.Command;
    import banking.domain.Session;
    import banking.dto.AccountDto;
    import banking.dto.LoginRequestDto;
    import banking.dto.LoginResponseDto;
    import banking.view.CustomerView;
    import banking.view.MainView;
    import banking.view.OutputView;

    import javax.sql.DataSource;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class BankingSystem {
        private final Scanner scanner = new Scanner(System.in);
        private final AccountService accountService;
        private Session session;
        private Map<Command, Runnable> mapper;

        public BankingSystem(String url) {
            accountService = new AccountService(new AccountDao(url));
            session =  new Session();
            generateMap();
        }

        public void run() {
            Command command = showMenu();
            execute(command);
        }

        private Command showMenu() {
            if (session.isLogin()) {
                return CustomerView.showMenu(scanner);
            }
            return MainView.showMenu(scanner);
        }

        private void execute(Command command) {
            mapper.get(command).run();
        }

        private void create() {
            AccountDto accountDto = accountService.create();
            OutputView.accountCreated(accountDto);
            run();
        }

        private void balance() {
            OutputView.balance(session);
            run();
        }

        private void login() {
            LoginRequestDto loginRequestDto = MainView.login(scanner);
            try {
                LoginResponseDto loginResponseDto = accountService.login(loginRequestDto);
                session.logIn(loginResponseDto);
                OutputView.loginSuccess();
            } catch (IllegalArgumentException e) {
                OutputView.loginFail(e.getMessage());
            }
            run();
        }

        private void exit() {
    //        accountService.findAll();
            OutputView.exit();
        }

        private void logout() {

            session.logOut();
            OutputView.logOut();
            run();
        }

        private void invalid() {
            OutputView.invalid();
        }

        private void generateMap() {
            mapper = new HashMap<>();
            mapper.put(Command.CREATE, this::create);
            mapper.put(Command.BALANCE, this::balance);
            mapper.put(Command.LOGIN, this::login);
            mapper.put(Command.LOG_OUT, this::logout);
            mapper.put(Command.EXIT, this::exit);
            mapper.put(Command.INVALID, this::invalid);
        }


    }
  learner_created: true
- name: src/banking/application/AccountService.java
  visible: true
  text: |
    package banking.application;

    import banking.domain.Account;
    import banking.domain.AccountDao;
    import banking.dto.AccountDto;
    import banking.dto.LoginRequestDto;
    import banking.dto.LoginResponseDto;
    import banking.utils.AccountGenerator;

    import java.sql.SQLException;

    public class AccountService {
        public static final String WRONG_CARD_NUMBER_OR_PIN = "Wrong card number or PIN!";
        private final AccountDao accountDao;

        public AccountService(AccountDao accountDao) {
            this.accountDao = accountDao;
        }

        public AccountDto create() {
            Long id = accountDao.findNewId();
            Account created = accountDao.create(id);
            return new AccountDto(created);
        }

        public LoginResponseDto login(LoginRequestDto loginRequestDto) {
            String cardNumber = loginRequestDto.getCardNumber();
            String pin = loginRequestDto.getPin();
            Account account = accountDao.findByCardNumber(cardNumber)
                    .orElseThrow(() -> new IllegalArgumentException(WRONG_CARD_NUMBER_OR_PIN));
            account.validatePin(pin);
            return new LoginResponseDto(account);
        }

        public void findAll() {
            accountDao.findAll();
        }
    }
  learner_created: true
- name: src/banking/domain/Account.java
  visible: true
  text: |
    package banking.domain;

    import java.sql.ResultSet;
    import java.sql.SQLException;

    public class Account {
        private static Long id;
        public static final String WRONG_CARD_NUMBER_OR_PIN = "Wrong card number or PIN!";
        private  String cardNumber;
        private String pin;
        private Long balance;


        public Account(Long id, String cardNumber, String pin) {
            this.id = id;
            this.cardNumber = cardNumber;
            this.pin = pin;
            this.balance = 0L;
        }

        public Account(ResultSet account) throws SQLException {
            this.id = account.getLong("id");
            this.cardNumber = account.getString("number");
            this.pin = account.getString("pin");
            this.balance = account.getLong("balance");
        }


        public Long getId() {
            return id;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return pin;
        }

        public Long getBalance() {
            return balance;
        }

        public void validatePin(String pin) {
            if (!this.pin.equals(pin)) {
                throw new IllegalArgumentException(WRONG_CARD_NUMBER_OR_PIN);
            };
        }
    }
  learner_created: true
- name: src/banking/dto/AccountDto.java
  visible: true
  text: |
    package banking.dto;

    import banking.domain.Account;

    public class AccountDto {
        private String cardNumber;
        private String pin;

        public AccountDto(Account account) {
            this.cardNumber = account.getCardNumber();
            this.pin = account.getPin();
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return pin;
        }
    }
  learner_created: true
- name: src/banking/domain/AccountDao.java
  visible: true
  text: |
    package banking.domain;

    import banking.config.DataSourceFactory;
    import banking.utils.AccountGenerator;

    import javax.sql.DataSource;
    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.*;

    public class AccountDao {
        private DataSource dataSource;

        public AccountDao(String url) {
            this.dataSource = DataSourceFactory.createDatabase(url);
        }
        public Account create(Long id) {

            Account account = AccountGenerator.create(id);
            insert(account);
            return account;
        }

        private void insert(Account account) {
            try (Connection conn = dataSource.getConnection()) {
                try (Statement statement = conn.createStatement()) {
                    statement.executeUpdate("INSERT INTO card VALUES("
                            + account.getId() + ", "
                            + "'" + account.getCardNumber() + "'" + ", "
                            + "'" + account.getPin() + "'" + ", "
                            + account.getBalance()
                            + ")");
                }
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            };
        }

        public Optional<Account> findByCardNumber(String cardNumber) {
            Account account = null;
            try (Connection conn = dataSource.getConnection()) {
                try (Statement statement = conn.createStatement();) {
                    try (ResultSet rs = statement.executeQuery("SELECT * FROM card WHERE number = " + cardNumber)) {
                        while (rs.next()) {
                            account = new Account(rs);
                        }
                    }
                }
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
            return Optional.ofNullable(account);
        }


        public Long findNewId() {
            try (Connection conn = dataSource.getConnection()) {
                try (Statement statement = conn.createStatement()) {
                    try (ResultSet id = statement.executeQuery("SELECT id FROM card ORDER BY id DESC LIMIT 1")) {
                        while (id.next()) {
                            return id.getLong("id") + 1L;
                        }
                    }
                }
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
            return 1L;
        }

        public void findAll() {
            try (Connection conn = dataSource.getConnection()) {
                try (Statement statement = conn.createStatement()) {
                    ResultSet rs = statement.executeQuery("SELECT * FROM card");
                    while (rs.next()) {
                        System.out.println(rs.getString("number") + " " + rs.getString("pin"));
                    }
                }
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/banking/domain/Session.java
  visible: true
  text: |
    package banking.domain;

    import banking.dto.LoginResponseDto;

    public class Session {
        private boolean isLogin;
        private Long balance;

        public Session() {
            isLogin = false;
        }

        public boolean isLogin() {
            return isLogin;
        }

        public void logOut() {
            balance = 0L;
            isLogin = false;
        }

        public void logIn(LoginResponseDto login) {
            this.balance = login.getBalance();
            isLogin = true;
        }

        public Long getBalance() {
            return balance;
        }
    }
  learner_created: true
- name: src/banking/view/OutputView.java
  visible: true
  text: |
    package banking.view;

    import banking.domain.Session;
    import banking.dto.AccountDto;

    public class OutputView {

        public static final String EXIT = "Bye!";
        public static final String PIN = "Your card PIN:";
        public static final String CARD_NUMBER = "Your card number:";
        public static final String CREATED = "Your card has been created";
        public static final String LOGGED_IN = "You have successfully logged in!";
        public static final String LOGGED_OUT = "You have successfully logged out!";
        public static final String BALANCE = "Balance: ";

        public static void exit() {
            System.out.println(EXIT);
        }

        public static void accountCreated(AccountDto accountDto) {
            System.out.println();
            System.out.println(CREATED);
            System.out.println(CARD_NUMBER);
            System.out.println(accountDto.getCardNumber());
            System.out.println(PIN);
            System.out.println(accountDto.getPin());
            System.out.println();

        }

        public static void loginFail(String message) {
            System.out.println(message);
        }

        public static void loginSuccess() {
            System.out.println(LOGGED_IN);
            System.out.println();
        }

        public static void logOut() {
            System.out.println();
            System.out.println(LOGGED_OUT);
            System.out.println();
        }

        public static void balance(Session session) {
            System.out.println();
            System.out.print(BALANCE);
            System.out.println(session.getBalance());
            System.out.println();
        }

        public static void invalid() {
        }
    }
  learner_created: true
- name: src/banking/dto/LoginResponseDto.java
  visible: true
  text: |
    package banking.dto;

    import banking.domain.Account;

    public class LoginResponseDto {
        private final Long balance;

        public LoginResponseDto(Account account) {
            this.balance = account.getBalance();
        }

        public Long getBalance() {
            return balance;
        }
    }
  learner_created: true
- name: src/banking/view/CustomerView.java
  visible: true
  text: |
    package banking.view;

    import banking.domain.Command;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class CustomerView {

        public static final String BALANCE = "1. Balance";
        public static final String LOG_OUT_ACCOUNT = "2. Log out";
        public static final String EXIT = "0. Exit";

        private static Map<String, Command> commands;

        static {
            commands = new HashMap<>();
            commands.put("1", Command.BALANCE);
            commands.put("2", Command.LOG_OUT);
            commands.put("0", Command.EXIT);
        }

        public static Command showMenu(Scanner scanner) {
            System.out.println(BALANCE);
            System.out.println(LOG_OUT_ACCOUNT);
            System.out.println(EXIT);

            String choice = scanner.nextLine();
            return commands.getOrDefault(choice, Command.INVALID);
        }
    }
  learner_created: true
- name: src/banking/dto/LoginRequestDto.java
  visible: true
  text: |
    package banking.dto;

    public class LoginRequestDto {
        private final String cardNumber;
        private final String pin;

        public LoginRequestDto(String cardNumber, String pin) {
            this.cardNumber = cardNumber;
            this.pin = pin;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return pin;
        }
    }
  learner_created: true
- name: src/banking/domain/Command.java
  visible: true
  text: |
    package banking.domain;

    public enum Command {

        CREATE("create"),
        BALANCE("balance"),
        LOGIN("login"),
        LOG_OUT("logout"),
        EXIT("exit"),
        INVALID("invalid");


        private final String command;

        Command(String command) {
            this.command = command;
        }

        public String getCommand() {
            return command;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Unchecked
record: 4
